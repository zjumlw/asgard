<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.zhangguo.mybatis01.dao.studentMapper"就是com.zhangguo.mybatis01.dao(包名)+studentMapper(studentMapper.xml文件去除后缀)
-->
<mapper namespace="com.will.asgard.thor.mysql.dao.studentMapper">
  <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为selectStudentById，id属性值必须是唯一的，不能够重复
使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
resultType="com.zhangguo.mybatis01.entities.Student"就表示将查询结果封装成一个Student类的对象返回
Student类就是student表所对应的实体类
-->
  <!--
  根据id查询得到一个user对象
-->
  <select id="selectStudentById" resultType="com.will.asgard.thor.model.hello.Student">
    select * from student where id = #{id}
  </select>
  <select id="selectStudentByName" parameterType="String"
          resultType="com.will.asgard.thor.model.hello.Student">
    select * from student where name like '%${value}%'
  </select>
  <insert id="insertStudent" parameterType="com.will.asgard.thor.model.hello.Student">
    insert into student (name, sex) VALUES (#{name}, '${sex}')
  </insert>
  <update id="updateStudent" parameterType="com.will.asgard.thor.model.hello.Student">
    update student set name=#{name},sex=#{sex} where id=#{id}
  </update>
  <delete id="deleteStudent" parameterType="long">
    delete from student where id=#{id}
  </delete>

</mapper>